{
  "stats": {
    "suites": 17,
    "tests": 21,
    "passes": 21,
    "pending": 0,
    "failures": 0,
    "start": "2024-03-03T17:20:40.799Z",
    "end": "2024-03-03T17:20:57.496Z",
    "duration": 16697,
    "testsRegistered": 21,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "1af1d3f1-6c13-4bfe-8907-3994a63bff49",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "72752a82-fcb0-49f4-811e-2f48a2f5dbe7",
          "title": "Login page tests",
          "fullFile": "C:\\Users\\Acer\\Desktop\\Automation first steps\\test\\Login page tests\\test14 - reaching Inventory-item while not logged.js",
          "file": "\\test\\Login page tests\\test14 - reaching Inventory-item while not logged.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "navigate to Inventory-item while not logged in",
              "fullTitle": "Login page tests navigate to Inventory-item while not logged in",
              "timedOut": null,
              "duration": 2925,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// ----Execution Steps----\n// launch browser\nlet driver = await new Builder().forBrowser(\"chrome\").build();\n//navigate to /inventory endpoint\nawait driver.get(\"https://www.saucedemo.com/inventory-item.html/\");\n//----Assertions----\n//--Assert1: URL after logging in is changed\nconst EXPECTED_ERROR = \"Epic sadface: You can only access '/inventory-item.html/' when you are logged in.\";\nconst ACTUAL_ERROR_TEXT = await driver.findElement(By.css('[data-test=\"error\"]')).getText();\nassert.strictEqual(ACTUAL_ERROR_TEXT, EXPECTED_ERROR);\n//close browser\nawait driver.quit();",
              "err": {},
              "uuid": "a6f1a568-dd3b-4263-af30-2cea17ba0de1",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a6f1a568-dd3b-4263-af30-2cea17ba0de1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2925,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "76df9024-5c5d-4fee-ab2c-40a23faef86d",
          "title": "Login page tests",
          "fullFile": "C:\\Users\\Acer\\Desktop\\Automation first steps\\test\\Login page tests\\test10 - homepage loads in less than 2s.js",
          "file": "\\test\\Login page tests\\test10 - homepage loads in less than 2s.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "homepage loads in less than 2sec",
              "fullTitle": "Login page tests homepage loads in less than 2sec",
              "timedOut": null,
              "duration": 3588,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// ----Execution Steps----\n// launch browser\nlet driver = await new Builder().forBrowser(\"chrome\").build();\n//start timer to capture the load time \nconst startTime = new Date().getTime();\n//navigate to app\nawait driver.get(\"https://www.saucedemo.com/\");\n//----Assertions----\n//--Assert1: homepage load time is <2 sec\n//wait till page is loaded, capture time, calculate load time\nawait driver.wait(until.elementLocated(By.css('body')));\nconst endTime = new Date().getTime();\nconst pageLoadTime = endTime - startTime;\n//assert that page loads faster than 2 secs\nif (pageLoadTime <= 2000) {\n} else {\n  throw new Error('Page took longer than 2 seconds to load.');\n}\n\n//close browser\nawait driver.quit();",
              "err": {},
              "uuid": "d7860f27-c881-4afe-aa11-b2bb1c0481c6",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d7860f27-c881-4afe-aa11-b2bb1c0481c6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3588,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "2fd96fdb-e6d5-4818-af5c-413256cc6bc0",
          "title": "Login page tests",
          "fullFile": "C:\\Users\\Acer\\Desktop\\Automation first steps\\test\\Login page tests\\test12 - reaching Cart while not logged.js",
          "file": "\\test\\Login page tests\\test12 - reaching Cart while not logged.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "navigate to Cart while not logged in",
              "fullTitle": "Login page tests navigate to Cart while not logged in",
              "timedOut": null,
              "duration": 3588,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// ----Execution Steps----\n// launch browser\nlet driver = await new Builder().forBrowser(\"chrome\").build();\n//navigate to /inventory endpoint\nawait driver.get(\"https://www.saucedemo.com/cart.html/\");\n//----Assertions----\n//--Assert1: URL after logging in is changed\nconst EXPECTED_ERROR = \"Epic sadface: You can only access '/cart.html/' when you are logged in.\";\nconst ACTUAL_ERROR_TEXT = await driver.findElement(By.css('[data-test=\"error\"]')).getText();\nassert.strictEqual(ACTUAL_ERROR_TEXT, EXPECTED_ERROR);\n//close browser\nawait driver.quit();",
              "err": {},
              "uuid": "372ed33d-dcd1-4cd7-ab77-f83b41cd93c3",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "372ed33d-dcd1-4cd7-ab77-f83b41cd93c3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3588,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "107551db-0de9-49a3-afa9-587848263ddc",
          "title": "Login page tests",
          "fullFile": "C:\\Users\\Acer\\Desktop\\Automation first steps\\test\\Login page tests\\test4 - login with empty password.js",
          "file": "\\test\\Login page tests\\test4 - login with empty password.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "login with empty password",
              "fullTitle": "Login page tests login with empty password",
              "timedOut": null,
              "duration": 4310,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// ----Execution Steps----\n// launch browser\nlet driver = await new Builder().forBrowser(\"chrome\").build();\n//navigate to app\nawait driver.get(\"https://www.saucedemo.com/\");\n// input valid Username \nawait driver.findElement(By.id(\"user-name\")).sendKeys(\"standard_user\");\n//click Login button\nawait driver.findElement(By.id(\"login-button\")).click();\n\n//----Assertions----\n//--Assert1: Error is displayed with text \"Epic sadface: Password is required\"\nconst EXPECTED_ERROR = \"Epic sadface: Password is required\";\nconst ACTUAL_ERROR = await driver.findElement(By.css('[data-test=\"error\"]')).getText();\nassert.strictEqual(ACTUAL_ERROR, EXPECTED_ERROR);\n//close browser\nawait driver.quit();",
              "err": {},
              "uuid": "7aeadf21-3283-4e68-a7d0-28e485492b96",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7aeadf21-3283-4e68-a7d0-28e485492b96"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4310,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "efaac7ee-01fe-47d3-9393-78af3b3f7b5b",
          "title": "Login page tests",
          "fullFile": "C:\\Users\\Acer\\Desktop\\Automation first steps\\test\\Login page tests\\test3 - login with empty username .js",
          "file": "\\test\\Login page tests\\test3 - login with empty username .js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "login with empty username",
              "fullTitle": "Login page tests login with empty username",
              "timedOut": null,
              "duration": 4512,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// ----Execution Steps----\n// launch browser\nlet driver = await new Builder().forBrowser(\"chrome\").build();\n//navigate to app\nawait driver.get(\"https://www.saucedemo.com/\");\n// input valid Pass\nawait driver.findElement(By.id(\"password\")).sendKeys(\"secret_sauce\");\n//click Login button\nawait driver.findElement(By.id(\"login-button\")).click();\n\n//----Assertions----\n//--Assert1: Error is displayed with text \"Epic sadface: Username is required\"\nconst EXPECTED_ERROR = \"Epic sadface: Username is required\";\nconst ACTUAL_ERROR_TEXT = await driver.findElement(By.css('[data-test=\"error\"]')).getText();\nassert.strictEqual(ACTUAL_ERROR_TEXT, EXPECTED_ERROR);\n//close browser\nawait driver.quit();",
              "err": {},
              "uuid": "a6ae8e47-38bd-4428-af4d-35486237e9a8",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a6ae8e47-38bd-4428-af4d-35486237e9a8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4512,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "5cf0b6aa-334e-420c-b86d-7a90a213f5ca",
          "title": "Login page tests",
          "fullFile": "C:\\Users\\Acer\\Desktop\\Automation first steps\\test\\Login page tests\\test2 - login with empty username and password.js",
          "file": "\\test\\Login page tests\\test2 - login with empty username and password.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "login with empty username and password",
              "fullTitle": "Login page tests login with empty username and password",
              "timedOut": null,
              "duration": 4781,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// ----Execution Steps----\n// launch browser\nlet driver = await new Builder().forBrowser(\"chrome\").build();\n//navigate to app\nawait driver.get(\"https://www.saucedemo.com/\");\n//click Login button\nawait driver.findElement(By.id(\"login-button\")).click();\n\n//----Assertions----\n//--Assert1: Error is displayed with text \"Epic sadface: Username is required\"\nconst EXPECTED_ERROR = \"Epic sadface: Username is required\";\nconst ACTUAL_ERROR_TEXT = await driver.findElement(By.css('[data-test=\"error\"]')).getText();\nassert.strictEqual(ACTUAL_ERROR_TEXT, EXPECTED_ERROR);\n//close browser\nawait driver.quit();",
              "err": {},
              "uuid": "b2e37f46-fd09-4267-919b-f33eefb8b151",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b2e37f46-fd09-4267-919b-f33eefb8b151"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4781,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "ce7b8276-940e-4843-91c0-f8bc1e78e903",
          "title": "Login page tests",
          "fullFile": "C:\\Users\\Acer\\Desktop\\Automation first steps\\test\\Login page tests\\test11 - reaching Inventory while not logged copy.js",
          "file": "\\test\\Login page tests\\test11 - reaching Inventory while not logged copy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "navigate to Inventory while not logged in",
              "fullTitle": "Login page tests navigate to Inventory while not logged in",
              "timedOut": null,
              "duration": 4850,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// ----Execution Steps----\n// launch browser\nlet driver = await new Builder().forBrowser(\"chrome\").build();\n//navigate to /inventory endpoint\nawait driver.get(\"https://www.saucedemo.com/inventory.html/\");\n//----Assertions----\n//--Assert1: URL after logging in is changed\nconst EXPECTED_ERROR = \"Epic sadface: You can only access '/inventory.html/' when you are logged in.\";\nconst ACTUAL_ERROR_TEXT = await driver.findElement(By.css('[data-test=\"error\"]')).getText();\nassert.strictEqual(ACTUAL_ERROR_TEXT, EXPECTED_ERROR);\n//close browser\nawait driver.quit();",
              "err": {},
              "uuid": "d35da6e3-b03c-409a-9d99-28e2f87dc088",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d35da6e3-b03c-409a-9d99-28e2f87dc088"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4850,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "fba96eb9-fe81-4041-9127-659f3755a79e",
          "title": "Login page tests",
          "fullFile": "C:\\Users\\Acer\\Desktop\\Automation first steps\\test\\Login page tests\\test13 - reaching Checkout-step-one while not logged.js",
          "file": "\\test\\Login page tests\\test13 - reaching Checkout-step-one while not logged.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "navigate to Checkout-step-one while not logged in",
              "fullTitle": "Login page tests navigate to Checkout-step-one while not logged in",
              "timedOut": null,
              "duration": 4852,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// ----Execution Steps----\n// launch browser\nlet driver = await new Builder().forBrowser(\"chrome\").build();\n//navigate to /inventory endpoint\nawait driver.get(\"https://www.saucedemo.com/checkout-step-one.html/\");\n//----Assertions----\n//--Assert1: URL after logging in is changed\nconst EXPECTED_ERROR = \"Epic sadface: You can only access '/checkout-step-one.html/' when you are logged in.\";\nconst ACTUAL_ERROR_TEXT = await driver.findElement(By.css('[data-test=\"error\"]')).getText();\nassert.strictEqual(ACTUAL_ERROR_TEXT, EXPECTED_ERROR);\n//close browser\nawait driver.quit();",
              "err": {},
              "uuid": "0e526049-260a-4d1c-a034-6d0581dfe51e",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0e526049-260a-4d1c-a034-6d0581dfe51e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4852,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "64d948f3-0c22-4938-9bdb-d7fe551301d6",
          "title": "Login page tests",
          "fullFile": "C:\\Users\\Acer\\Desktop\\Automation first steps\\test\\Login page tests\\test5 - login username does not exist.js",
          "file": "\\test\\Login page tests\\test5 - login username does not exist.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "login with non-existent username and existing pass",
              "fullTitle": "Login page tests login with non-existent username and existing pass",
              "timedOut": null,
              "duration": 4847,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// ----Execution Steps----\n// launch browser\nlet driver = await new Builder().forBrowser(\"chrome\").build();\n//navigate to app\nawait driver.get(\"https://www.saucedemo.com/\");\n// input non-existent Username and existing Pass\nawait driver.findElement(By.id(\"user-name\")).sendKeys(\"non-existent username\");\nawait driver.findElement(By.id(\"password\")).sendKeys(\"secret_sauce\");\n//click Login button\nawait driver.findElement(By.id(\"login-button\")).click();\n\n//----Assertions----\n//--Assert1: Error is displayed with text \"Epic sadface: Username and password do not match any user in this service\"\nconst EXPECTED_ERROR = \"Epic sadface: Username and password do not match any user in this service\";\nconst ACTUAL_ERROR = await driver.findElement(By.css('[data-test=\"error\"]')).getText();\nassert.strictEqual(ACTUAL_ERROR, EXPECTED_ERROR);\n//close browser\nawait driver.quit();",
              "err": {},
              "uuid": "90f935e3-fb42-4292-a84e-662503677573",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "90f935e3-fb42-4292-a84e-662503677573"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4847,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "0f06dd99-29c3-446a-ac75-a85439425694",
          "title": "Login page tests",
          "fullFile": "C:\\Users\\Acer\\Desktop\\Automation first steps\\test\\Login page tests\\test6 - login pass doesn't match.js",
          "file": "\\test\\Login page tests\\test6 - login pass doesn't match.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "login with pass doesn't match username",
              "fullTitle": "Login page tests login with pass doesn't match username",
              "timedOut": null,
              "duration": 4869,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// ----Execution Steps----\n// launch browser\nlet driver = await new Builder().forBrowser(\"chrome\").build();\n//navigate to app\nawait driver.get(\"https://www.saucedemo.com/\");\n// input existing Username and non-existent Pass\nawait driver.findElement(By.id(\"user-name\")).sendKeys(\"standard_user\");\nawait driver.findElement(By.id(\"password\")).sendKeys(\"non-existent pass\");\n//click Login button\nawait driver.findElement(By.id(\"login-button\")).click();\n\n//----Assertions----\n//--Assert1: Error is displayed with text \"Epic sadface: Username and password do not match any user in this service\"\nconst EXPECTED_ERROR = \"Epic sadface: Username and password do not match any user in this service\";\nconst ACTUAL_ERROR = await driver.findElement(By.css('[data-test=\"error\"]')).getText();\nassert.strictEqual(ACTUAL_ERROR, EXPECTED_ERROR);\n//close browser\nawait driver.quit();",
              "err": {},
              "uuid": "90a17745-ee47-4504-a79e-05979c26e012",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "90a17745-ee47-4504-a79e-05979c26e012"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4869,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "9d367d91-c480-4037-b48f-699ce11fdfe7",
          "title": "Login page tests",
          "fullFile": "C:\\Users\\Acer\\Desktop\\Automation first steps\\test\\Login page tests\\test1 - login with standard user.js",
          "file": "\\test\\Login page tests\\test1 - login with standard user.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "login with standard user",
              "fullTitle": "Login page tests login with standard user",
              "timedOut": null,
              "duration": 5274,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// ----Execution Steps----\n// launch browser\nlet driver = await new Builder().forBrowser(\"chrome\").build();\n//navigate to app\nawait driver.get(\"https://www.saucedemo.com/\");\n// input valid Username and Pass\nawait driver.findElement(By.id(\"user-name\")).sendKeys(\"standard_user\");\nawait driver.findElement(By.id(\"password\")).sendKeys(\"secret_sauce\");\n//click Login button\nawait driver.findElement(By.id(\"login-button\")).click();\n//----Assertions----\n//--Assert1: URL after logging in is changed\nconst EXPECTED_URL = \"https://www.saucedemo.com/inventory.html\";\nconst ACTUAL_URL = await driver.getCurrentUrl();\nassert.strictEqual(ACTUAL_URL, EXPECTED_URL);\n//close browser\nawait driver.quit();",
              "err": {},
              "uuid": "d6c48fda-0173-44b5-b70e-edc24a558d44",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d6c48fda-0173-44b5-b70e-edc24a558d44"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5274,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "abd53828-8ce2-4dea-b40f-8999b6e5b9de",
          "title": "Inventory page",
          "fullFile": "C:\\Users\\Acer\\Desktop\\Automation first steps\\test\\Inventory page\\test2 - Clicking Cart icon navigates to cart page.js",
          "file": "\\test\\Inventory page\\test2 - Clicking Cart icon navigates to cart page.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Inventory page\"",
              "fullTitle": "Inventory page \"before each\" hook in \"Inventory page\"",
              "timedOut": null,
              "duration": 5174,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "// launch browser\ndriver = await new Builder().forBrowser(\"chrome\").build();\n// navigate to app\nawait driver.get(\"https://www.saucedemo.com/\");\n// input valid Username and Pass\nawait driver.findElement(By.id(\"user-name\")).sendKeys(\"standard_user\");\nawait driver.findElement(By.id(\"password\")).sendKeys(\"secret_sauce\");\n  \n// click Login button\nawait driver.findElement(By.id(\"login-button\")).click();",
              "err": {},
              "uuid": "5e2ebd21-fc43-4238-b35d-36514e520b43",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "clicking cart icon navigates to cart page",
              "fullTitle": "Inventory page clicking cart icon navigates to cart page",
              "timedOut": null,
              "duration": 319,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//---Execution steps---\n //find and click cart icon\n driver.findElement(By.className(\"shopping_cart_link\")).click();\n //----Assertions----\n //--Assert1: cart page is opened\n const EXPECTED_URL = \"https://www.saucedemo.com/cart.html\";\n await driver.wait(until.urlIs(EXPECTED_URL), 5000, 'Timeout: URL did not change');\n const ACTUAL_URL = await driver.getCurrentUrl();\n assert.strictEqual(ACTUAL_URL, EXPECTED_URL);\n \n await driver.quit();",
              "err": {},
              "uuid": "886560e0-2bf4-42dc-8dbb-71d9d05242c7",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "886560e0-2bf4-42dc-8dbb-71d9d05242c7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 319,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "fb13993d-9d4e-4934-b2a6-016b17da2fa4",
          "title": "Login page tests",
          "fullFile": "C:\\Users\\Acer\\Desktop\\Automation first steps\\test\\Login page tests\\test7 - login after 3 failed attempts.js",
          "file": "\\test\\Login page tests\\test7 - login after 3 failed attempts.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "login after 3 failed login attempts",
              "fullTitle": "Login page tests login after 3 failed login attempts",
              "timedOut": null,
              "duration": 5611,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// ----Execution Steps----\n// launch browser\nlet driver = await new Builder().forBrowser(\"chrome\").build();\n//navigate to app\nawait driver.get(\"https://www.saucedemo.com/\");\n// input non-existent Username and existing Password 1st time\nlet usernameField = driver.findElement(By.id(\"user-name\"));\nlet passwordField = driver.findElement(By.id(\"password\"));\nawait usernameField.sendKeys(\"standard_user1\");\nawait passwordField.sendKeys(\"secret_sauce\");\n//click Login button\nlet loginButton = driver.findElement(By.id(\"login-button\"));\nawait loginButton.click();\n//--Assert1: URL is not changed\nconst EXPECTED_URL = \"https://www.saucedemo.com/inventory.html\";\nlet actualUrl = await driver.getCurrentUrl();\nassert.notEqual(actualUrl, EXPECTED_URL);\n//clear username\nawait usernameField.clear();\n  \n// input non-existent Username 2d time\nawait usernameField.sendKeys(\"standard_user2\");\n  \n//--Assert2: URL is not changed\nactualUrl = await driver.getCurrentUrl();\nassert.notEqual(actualUrl, EXPECTED_URL);\n//clear username\nawait usernameField.clear();\n// input non-existent Username 3d time\nawait usernameField.sendKeys(\"standard_user3\");\n//--Assert3: URL is not changed\nactualUrl = await driver.getCurrentUrl();\nassert.notEqual(actualUrl, EXPECTED_URL);\n//clear username\nawait usernameField.clear();\n// input existing Username \nawait usernameField.sendKeys(\"standard_user\");\n//click Login button\nawait loginButton.click();\n\n//--Assert3: URL is changed to https://www.saucedemo.com/inventory.html\nactualUrl = await driver.getCurrentUrl();\nassert.strictEqual(actualUrl, EXPECTED_URL);\n//close browser\nawait driver.quit();",
              "err": {},
              "uuid": "74cf01f7-6954-4f87-a0cb-12f2d3d6c618",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "74cf01f7-6954-4f87-a0cb-12f2d3d6c618"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5611,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "04d91706-022b-4c1f-9864-31db30caa975",
          "title": "Inventory page",
          "fullFile": "C:\\Users\\Acer\\Desktop\\Automation first steps\\test\\Inventory page\\test1 - Elements are on the page.js",
          "file": "\\test\\Inventory page\\test1 - Elements are on the page.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "elements are on the page",
              "fullTitle": "Inventory page elements are on the page",
              "timedOut": null,
              "duration": 5863,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// ----Execution Steps----\n// launch browser\nlet driver = await new Builder().forBrowser(\"chrome\").build();\n//navigate to app\nawait driver.get(\"https://www.saucedemo.com/\");\n// input Username and Pass and click Login\nawait driver.findElement(By.id(\"user-name\")).sendKeys(\"standard_user\");\nawait driver.findElement(By.id(\"password\")).sendKeys(\"secret_sauce\");\nawait driver.findElement(By.id(\"login-button\")).click();\n//----Assertions----\n//--Assert1: Header 'Swag Labs' is on the page\nconst EXPECTED_HEADER_TEXT = 'Swag Labs';\nconst ACTUAL_HEADER_TEXT = await driver.findElement(By.className(\"header_label\")).getText();\nassert.strictEqual(ACTUAL_HEADER_TEXT, EXPECTED_HEADER_TEXT);\n//--Assert2: Invetory list with inventory items is on the page\nconst INVENTORY_LIST = await driver.findElement(By.className(\"inventory_list\"));\nconst INVENTORY_ITEM = await driver.findElement(By.className(\"inventory_item\"));\nassert.ok(INVENTORY_LIST);\nassert.ok(INVENTORY_ITEM);\n\n//--Assert3: Price, image and Add to cart button exist for each list item on the page\nconst ALL_INVENTORY_ITEMS = await driver.findElements(By.className(\"inventory_item\"));\nfor (const EACH_INVENTORY_ITEM of ALL_INVENTORY_ITEMS){\n  const CHILD_PRICE = await EACH_INVENTORY_ITEM.findElement(By.className(\"inventory_item_price\"))\n  const CHILD_IMAGE = await EACH_INVENTORY_ITEM.findElement(By.className(\"inventory_item_img\"))\n  const CHILD_ADD_TO_CART = await EACH_INVENTORY_ITEM.findElement(By.css('button'));\n  assert.ok(CHILD_PRICE.isDisplayed());\n  assert.ok(CHILD_IMAGE.isDisplayed());\n  assert.ok(CHILD_ADD_TO_CART.isDisplayed());\n};\n\n//--Assert4: Burger menu icon is on the page\nconst BURGER_MENU = await driver.findElement(By.className(\"bm-burger-button\"));\nassert.ok(BURGER_MENU);\n//--Assert5: Social icons are on the page\nconst SOCIAL_TWITTER = await driver.findElement(By.className(\"social_twitter\"));\nconst SOCIAL_FACEBOOK = await driver.findElement(By.className(\"social_facebook\"));\nconst SOCIAL_LINKEDIN = await driver.findElement(By.className(\"social_linkedin\"));\nassert.ok(SOCIAL_TWITTER.isDisplayed());\nassert.ok(SOCIAL_FACEBOOK.isDisplayed());\nassert.ok(SOCIAL_LINKEDIN.isDisplayed());\n//--Assert6: Shopping cart element is on the page\nconst CART_ELEMENT = await driver.findElement(By.className(\"shopping_cart_link\"));\nassert.ok(CART_ELEMENT.isDisplayed());\n//--Assert7: Sorting element is on the page\nconst SORTING_ELEMENT = await driver.findElement(By.className(\"product_sort_container\"));\nassert.ok(SORTING_ELEMENT.isDisplayed());\n//--Assert8: Footer copy text is on the page\nconst EXPECTED_FOOTER_TEXT = '© 2024 Sauce Labs. All Rights Reserved. Terms of Service | Privacy Policy';\nconst ACTUAL_FOOTER_TEXT = await driver.findElement(By.className(\"footer_copy\")).getText();\nassert.strictEqual(ACTUAL_FOOTER_TEXT, EXPECTED_FOOTER_TEXT);\n//close browser\nawait driver.quit();",
              "err": {},
              "uuid": "aee5ca0f-2e05-45a3-91ec-3202e4504e4c",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "aee5ca0f-2e05-45a3-91ec-3202e4504e4c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5863,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "1e8533c6-73c8-44d2-b12c-b0623f6b8832",
          "title": "Login page tests",
          "fullFile": "C:\\Users\\Acer\\Desktop\\Automation first steps\\test\\Login page tests\\test8 - username field is case sensitive.js",
          "file": "\\test\\Login page tests\\test8 - username field is case sensitive.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "username is case sensitive",
              "fullTitle": "Login page tests username is case sensitive",
              "timedOut": null,
              "duration": 3264,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// ----Execution Steps----\n// launch browser\nlet driver = await new Builder().forBrowser(\"chrome\").build();\n//navigate to app\nawait driver.get(\"https://www.saucedemo.com/\");\n// input Username and Pass\nawait driver.findElement(By.id(\"user-name\")).sendKeys(\"standard_useR\");\nawait driver.findElement(By.id(\"password\")).sendKeys(\"secret_sauce\");\n//click Login button\nawait driver.findElement(By.id(\"login-button\")).click();\n//----Assertions----\n//--Assert1: URL is not changed\nconst EXPECTED_URL = \"https://www.saucedemo.com/\";\nconst ACTUAL_URL = await driver.getCurrentUrl();\nassert.strictEqual(ACTUAL_URL, EXPECTED_URL);\n//close browser\nawait driver.quit();",
              "err": {},
              "uuid": "a62c9acc-b7e8-4bfb-89ee-428b569d4394",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a62c9acc-b7e8-4bfb-89ee-428b569d4394"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3264,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "ab7a0165-400c-41b8-abb1-0043ce49e4e5",
          "title": "Login page tests",
          "fullFile": "C:\\Users\\Acer\\Desktop\\Automation first steps\\test\\Login page tests\\test9 - password field is case sensitive.js",
          "file": "\\test\\Login page tests\\test9 - password field is case sensitive.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "username is case sensitive",
              "fullTitle": "Login page tests username is case sensitive",
              "timedOut": null,
              "duration": 2775,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// ----Execution Steps----\n// launch browser\nlet driver = await new Builder().forBrowser(\"chrome\").build();\n//navigate to app\nawait driver.get(\"https://www.saucedemo.com/\");\n// input Username and Password\nawait driver.findElement(By.id(\"user-name\")).sendKeys(\"standard_user\");\nawait driver.findElement(By.id(\"password\")).sendKeys(\"secret_saucE\");\n//click Login button\nawait driver.findElement(By.id(\"login-button\")).click();\n//----Assertions----\n//--Assert1: URL is not changed\nconst EXPECTED_URL = \"https://www.saucedemo.com/\";\nconst ACTUAL_URL = await driver.getCurrentUrl();\nassert.strictEqual(ACTUAL_URL, EXPECTED_URL);\n//close browser\nawait driver.quit();",
              "err": {},
              "uuid": "3c410fde-eaa7-4be7-946f-1e040c1dbff6",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3c410fde-eaa7-4be7-946f-1e040c1dbff6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2775,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "dbfa8b53-b888-4409-b89d-36a47e0c9782",
          "title": "Login page tests",
          "fullFile": "C:\\Users\\Acer\\Desktop\\Automation first steps\\test\\Login page tests\\test1.1 - parametrized login with set of users.js",
          "file": "\\test\\Login page tests\\test1.1 - parametrized login with set of users.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Succsess parametrized login with standard_user login",
              "fullTitle": "Login page tests Succsess parametrized login with standard_user login",
              "timedOut": null,
              "duration": 5035,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//run browser chrome\n      let driver = await new Builder().forBrowser(\"chrome\").build();\n      //navigate to website\n      await driver.get(\"https://www.saucedemo.com/\");\n      //find and input to username and pass fields\n      await driver.findElement(By.id(\"user-name\")).sendKeys(userName);\n      await driver.findElement(By.id(\"password\")).sendKeys(\"secret_sauce\");\n      //click login button\n      await driver.findElement(By.id(\"login-button\")).click();\n      //assertion to compare expected url after login and actual\n      const EXPECTED_URL = \"https://www.saucedemo.com/inventory.html\";\n      const ACTUAL_URL = await driver.getCurrentUrl();\n      assert.strictEqual(ACTUAL_URL, EXPECTED_URL);\n      //close the browser\n      await driver.quit();",
              "err": {},
              "uuid": "b6864d40-2505-4d86-9735-f0cff0869e7a",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Succsess parametrized login with problem_user login",
              "fullTitle": "Login page tests Succsess parametrized login with problem_user login",
              "timedOut": null,
              "duration": 1877,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//run browser chrome\n      let driver = await new Builder().forBrowser(\"chrome\").build();\n      //navigate to website\n      await driver.get(\"https://www.saucedemo.com/\");\n      //find and input to username and pass fields\n      await driver.findElement(By.id(\"user-name\")).sendKeys(userName);\n      await driver.findElement(By.id(\"password\")).sendKeys(\"secret_sauce\");\n      //click login button\n      await driver.findElement(By.id(\"login-button\")).click();\n      //assertion to compare expected url after login and actual\n      const EXPECTED_URL = \"https://www.saucedemo.com/inventory.html\";\n      const ACTUAL_URL = await driver.getCurrentUrl();\n      assert.strictEqual(ACTUAL_URL, EXPECTED_URL);\n      //close the browser\n      await driver.quit();",
              "err": {},
              "uuid": "4e993c10-d53e-444e-a823-96d0fda3e7bb",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Succsess parametrized login with performance_glitch_user login",
              "fullTitle": "Login page tests Succsess parametrized login with performance_glitch_user login",
              "timedOut": null,
              "duration": 6478,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//run browser chrome\n      let driver = await new Builder().forBrowser(\"chrome\").build();\n      //navigate to website\n      await driver.get(\"https://www.saucedemo.com/\");\n      //find and input to username and pass fields\n      await driver.findElement(By.id(\"user-name\")).sendKeys(userName);\n      await driver.findElement(By.id(\"password\")).sendKeys(\"secret_sauce\");\n      //click login button\n      await driver.findElement(By.id(\"login-button\")).click();\n      //assertion to compare expected url after login and actual\n      const EXPECTED_URL = \"https://www.saucedemo.com/inventory.html\";\n      const ACTUAL_URL = await driver.getCurrentUrl();\n      assert.strictEqual(ACTUAL_URL, EXPECTED_URL);\n      //close the browser\n      await driver.quit();",
              "err": {},
              "uuid": "67422333-96a8-4504-98b0-287824b6ddb7",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Succsess parametrized login with error_user login",
              "fullTitle": "Login page tests Succsess parametrized login with error_user login",
              "timedOut": null,
              "duration": 1359,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//run browser chrome\n      let driver = await new Builder().forBrowser(\"chrome\").build();\n      //navigate to website\n      await driver.get(\"https://www.saucedemo.com/\");\n      //find and input to username and pass fields\n      await driver.findElement(By.id(\"user-name\")).sendKeys(userName);\n      await driver.findElement(By.id(\"password\")).sendKeys(\"secret_sauce\");\n      //click login button\n      await driver.findElement(By.id(\"login-button\")).click();\n      //assertion to compare expected url after login and actual\n      const EXPECTED_URL = \"https://www.saucedemo.com/inventory.html\";\n      const ACTUAL_URL = await driver.getCurrentUrl();\n      assert.strictEqual(ACTUAL_URL, EXPECTED_URL);\n      //close the browser\n      await driver.quit();",
              "err": {},
              "uuid": "9cefccbe-6241-44bf-8a24-83782a014259",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Succsess parametrized login with visual_user login",
              "fullTitle": "Login page tests Succsess parametrized login with visual_user login",
              "timedOut": null,
              "duration": 1378,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//run browser chrome\n      let driver = await new Builder().forBrowser(\"chrome\").build();\n      //navigate to website\n      await driver.get(\"https://www.saucedemo.com/\");\n      //find and input to username and pass fields\n      await driver.findElement(By.id(\"user-name\")).sendKeys(userName);\n      await driver.findElement(By.id(\"password\")).sendKeys(\"secret_sauce\");\n      //click login button\n      await driver.findElement(By.id(\"login-button\")).click();\n      //assertion to compare expected url after login and actual\n      const EXPECTED_URL = \"https://www.saucedemo.com/inventory.html\";\n      const ACTUAL_URL = await driver.getCurrentUrl();\n      assert.strictEqual(ACTUAL_URL, EXPECTED_URL);\n      //close the browser\n      await driver.quit();",
              "err": {},
              "uuid": "6117c161-7b72-4b5b-88e8-97136401c358",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b6864d40-2505-4d86-9735-f0cff0869e7a",
            "4e993c10-d53e-444e-a823-96d0fda3e7bb",
            "67422333-96a8-4504-98b0-287824b6ddb7",
            "9cefccbe-6241-44bf-8a24-83782a014259",
            "6117c161-7b72-4b5b-88e8-97136401c358"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 16127,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.3.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "testResults",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportFilename": "testResults"
      },
      "version": "6.2.0"
    }
  }
}