{
  "stats": {
    "suites": 11,
    "tests": 16,
    "passes": 15,
    "pending": 0,
    "failures": 1,
    "start": "2024-02-24T13:43:10.679Z",
    "end": "2024-02-24T13:43:27.884Z",
    "duration": 17205,
    "testsRegistered": 16,
    "passPercent": 93.75,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b693d49a-803f-4cf2-b1cd-fb0407ae8efe",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "14ab62a5-1520-4b8e-955d-118bfb027869",
          "title": "Login page tests",
          "fullFile": "C:\\Users\\Acer\\Desktop\\Automation first steps\\test\\Login page tests\\test10 - homepage loads in less than 2s.js",
          "file": "\\test\\Login page tests\\test10 - homepage loads in less than 2s.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "homepage loads in less than 2sec",
              "fullTitle": "Login page tests homepage loads in less than 2sec",
              "timedOut": null,
              "duration": 3490,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// ----Execution Steps----\n// launch browser\nlet driver = await new Builder().forBrowser(\"chrome\").build();\n//start timer to capture the load time \nconst startTime = new Date().getTime();\n//navigate to app\nawait driver.get(\"https://www.saucedemo.com/\");\n//----Assertions----\n//--Assert1: homepage load time is <2 sec\n//wait till page is loaded, capture time, calculate load time\nawait driver.wait(until.elementLocated(By.css('body')));\nconst endTime = new Date().getTime();\nconst pageLoadTime = endTime - startTime;\n//assert that page loads faster than 2 secs\nif (pageLoadTime <= 2000) {\n} else {\n  throw new Error('Page took longer than 2 seconds to load.');\n}\n\n//close browser\nawait driver.quit();",
              "err": {},
              "uuid": "d65890ba-c9cc-4909-848b-525961c44d24",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d65890ba-c9cc-4909-848b-525961c44d24"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3490,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "8aa4491f-53df-4c31-81e2-d0b1178972c3",
          "title": "Login page tests",
          "fullFile": "C:\\Users\\Acer\\Desktop\\Automation first steps\\test\\Login page tests\\test2 - login with empty username and password.js",
          "file": "\\test\\Login page tests\\test2 - login with empty username and password.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "login with empty username and password",
              "fullTitle": "Login page tests login with empty username and password",
              "timedOut": null,
              "duration": 3753,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// ----Execution Steps----\n// launch browser\nlet driver = await new Builder().forBrowser(\"chrome\").build();\n//navigate to app\nawait driver.get(\"https://www.saucedemo.com/\");\n//click Login button\nawait driver.findElement(By.id(\"login-button\")).click();\n\n//----Assertions----\n//--Assert1: Error is displayed with text \"Epic sadface: Username is required\"\nconst EXPECTED_ERROR = \"Epic sadface: Username is required\";\nconst ACTUAL_ERROR_TEXT = await driver.findElement(By.css('[data-test=\"error\"]')).getText();\nassert.strictEqual(ACTUAL_ERROR_TEXT, EXPECTED_ERROR);\n//close browser\nawait driver.quit();",
              "err": {},
              "uuid": "f219c924-56ce-4e3d-b44c-fd61a0b53552",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f219c924-56ce-4e3d-b44c-fd61a0b53552"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3753,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "aa5ffb76-3845-471f-9bc8-06023c154a78",
          "title": "Login page tests",
          "fullFile": "C:\\Users\\Acer\\Desktop\\Automation first steps\\test\\Login page tests\\test1 - login with standard user.js",
          "file": "\\test\\Login page tests\\test1 - login with standard user.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "login with standard user",
              "fullTitle": "Login page tests login with standard user",
              "timedOut": null,
              "duration": 3929,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// ----Execution Steps----\n// launch browser\nlet driver = await new Builder().forBrowser(\"chrome\").build();\n//navigate to app\nawait driver.get(\"https://www.saucedemo.com/\");\n// input valid Username and Pass\nawait driver.findElement(By.id(\"user-name\")).sendKeys(\"standard_user\");\nawait driver.findElement(By.id(\"password\")).sendKeys(\"secret_sauce\");\n//click Login button\nawait driver.findElement(By.id(\"login-button\")).click();\n//----Assertions----\n//--Assert1: URL after logging in is changed\nconst EXPECTED_URL = \"https://www.saucedemo.com/inventory.html\";\nconst ACTUAL_URL = await driver.getCurrentUrl();\nassert.strictEqual(ACTUAL_URL, EXPECTED_URL);\n//close browser\nawait driver.quit();",
              "err": {},
              "uuid": "d3629633-d542-4e9e-8ee7-3187213ebe72",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d3629633-d542-4e9e-8ee7-3187213ebe72"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3929,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "740538f7-d422-4fb8-8b80-a6bfd8cb5e24",
          "title": "Login page tests",
          "fullFile": "C:\\Users\\Acer\\Desktop\\Automation first steps\\test\\Login page tests\\test8 - username field is case sensitive.js",
          "file": "\\test\\Login page tests\\test8 - username field is case sensitive.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "username is case sensitive",
              "fullTitle": "Login page tests username is case sensitive",
              "timedOut": null,
              "duration": 3929,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// ----Execution Steps----\n// launch browser\nlet driver = await new Builder().forBrowser(\"chrome\").build();\n//navigate to app\nawait driver.get(\"https://www.saucedemo.com/\");\n// input Username and Pass\nawait driver.findElement(By.id(\"user-name\")).sendKeys(\"standard_useR\");\nawait driver.findElement(By.id(\"password\")).sendKeys(\"secret_sauce\");\n//click Login button\nawait driver.findElement(By.id(\"login-button\")).click();\n//----Assertions----\n//--Assert1: URL is not changed\nconst EXPECTED_URL = \"https://www.saucedemo.com/\";\nconst ACTUAL_URL = await driver.getCurrentUrl();\nassert.strictEqual(ACTUAL_URL, EXPECTED_URL);\n//close browser\nawait driver.quit();",
              "err": {},
              "uuid": "18b547ba-c246-4d27-b7c1-1f27fcd932e3",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "18b547ba-c246-4d27-b7c1-1f27fcd932e3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3929,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "d2f916b1-52c3-4308-bee9-2b98b813e151",
          "title": "Login page tests",
          "fullFile": "C:\\Users\\Acer\\Desktop\\Automation first steps\\test\\Login page tests\\test3 - login with empty username .js",
          "file": "\\test\\Login page tests\\test3 - login with empty username .js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "login with empty username",
              "fullTitle": "Login page tests login with empty username",
              "timedOut": null,
              "duration": 4036,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// ----Execution Steps----\n// launch browser\nlet driver = await new Builder().forBrowser(\"chrome\").build();\n//navigate to app\nawait driver.get(\"https://www.saucedemo.com/\");\n// input valid Pass\nawait driver.findElement(By.id(\"password\")).sendKeys(\"secret_sauce\");\n//click Login button\nawait driver.findElement(By.id(\"login-button\")).click();\n\n//----Assertions----\n//--Assert1: Error is displayed with text \"Epic sadface: Username is required\"\nconst EXPECTED_ERROR = \"Epic sadface: Username is required\";\nconst ACTUAL_ERROR_TEXT = await driver.findElement(By.css('[data-test=\"error\"]')).getText();\nassert.strictEqual(ACTUAL_ERROR_TEXT, EXPECTED_ERROR);\n//close browser\nawait driver.quit();",
              "err": {},
              "uuid": "026c3579-92ca-4358-af57-a68fdda1cf7c",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "026c3579-92ca-4358-af57-a68fdda1cf7c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4036,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "f4e5bf45-df48-450c-9bca-7fbab8ea9deb",
          "title": "Login page tests",
          "fullFile": "C:\\Users\\Acer\\Desktop\\Automation first steps\\test\\Login page tests\\test4 - login with empty password.js",
          "file": "\\test\\Login page tests\\test4 - login with empty password.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "login with empty password",
              "fullTitle": "Login page tests login with empty password",
              "timedOut": null,
              "duration": 4045,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// ----Execution Steps----\n// launch browser\nlet driver = await new Builder().forBrowser(\"chrome\").build();\n//navigate to app\nawait driver.get(\"https://www.saucedemo.com/\");\n// input valid Username \nawait driver.findElement(By.id(\"user-name\")).sendKeys(\"standard_user\");\n//click Login button\nawait driver.findElement(By.id(\"login-button\")).click();\n\n//----Assertions----\n//--Assert1: Error is displayed with text \"Epic sadface: Password is required\"\nconst EXPECTED_ERROR = \"Epic sadface: Password is required\";\nconst ACTUAL_ERROR = await driver.findElement(By.css('[data-test=\"error\"]')).getText();\nassert.strictEqual(ACTUAL_ERROR, EXPECTED_ERROR);\n//close browser\nawait driver.quit();",
              "err": {},
              "uuid": "74c3c607-4258-4201-92b1-a94e5bff1625",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "74c3c607-4258-4201-92b1-a94e5bff1625"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4045,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "6ec23077-2d15-4c61-8d96-827e50ab6457",
          "title": "Login page tests",
          "fullFile": "C:\\Users\\Acer\\Desktop\\Automation first steps\\test\\Login page tests\\test6 - login pass doesn't match.js",
          "file": "\\test\\Login page tests\\test6 - login pass doesn't match.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "login with pass doesn't match username",
              "fullTitle": "Login page tests login with pass doesn't match username",
              "timedOut": null,
              "duration": 4090,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// ----Execution Steps----\n// launch browser\nlet driver = await new Builder().forBrowser(\"chrome\").build();\n//navigate to app\nawait driver.get(\"https://www.saucedemo.com/\");\n// input existing Username and non-existent Pass\nawait driver.findElement(By.id(\"user-name\")).sendKeys(\"standard_user\");\nawait driver.findElement(By.id(\"password\")).sendKeys(\"non-existent pass\");\n//click Login button\nawait driver.findElement(By.id(\"login-button\")).click();\n\n//----Assertions----\n//--Assert1: Error is displayed with text \"Epic sadface: Username and password do not match any user in this service\"\nconst EXPECTED_ERROR = \"Epic sadface: Username and password do not match any user in this service\";\nconst ACTUAL_ERROR = await driver.findElement(By.css('[data-test=\"error\"]')).getText();\nassert.strictEqual(ACTUAL_ERROR, EXPECTED_ERROR);\n//close browser\nawait driver.quit();",
              "err": {},
              "uuid": "4a9123d1-2288-4504-b1a0-d224fea57937",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4a9123d1-2288-4504-b1a0-d224fea57937"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4090,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "8fd19d72-e735-449d-bb3e-f853eaca02ee",
          "title": "Login page tests",
          "fullFile": "C:\\Users\\Acer\\Desktop\\Automation first steps\\test\\Login page tests\\test5 - login username does not exist.js",
          "file": "\\test\\Login page tests\\test5 - login username does not exist.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "login with non-existent username and existing pass",
              "fullTitle": "Login page tests login with non-existent username and existing pass",
              "timedOut": null,
              "duration": 4198,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// ----Execution Steps----\n// launch browser\nlet driver = await new Builder().forBrowser(\"chrome\").build();\n//navigate to app\nawait driver.get(\"https://www.saucedemo.com/\");\n// input non-existent Username and existing Pass\nawait driver.findElement(By.id(\"user-name\")).sendKeys(\"non-existent username\");\nawait driver.findElement(By.id(\"password\")).sendKeys(\"secret_sauce\");\n//click Login button\nawait driver.findElement(By.id(\"login-button\")).click();\n\n//----Assertions----\n//--Assert1: Error is displayed with text \"Epic sadface: Username and password do not match any user in this service\"\nconst EXPECTED_ERROR = \"Epic sadface: Username and password do not match any user in this service\";\nconst ACTUAL_ERROR = await driver.findElement(By.css('[data-test=\"error\"]')).getText();\nassert.strictEqual(ACTUAL_ERROR, EXPECTED_ERROR);\n//close browser\nawait driver.quit();",
              "err": {},
              "uuid": "0d4b70d5-02a1-4612-894f-ec2b30c908bf",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0d4b70d5-02a1-4612-894f-ec2b30c908bf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4198,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "22b2b3a3-fc15-4108-8285-c2c4a4efa1fb",
          "title": "Login page tests",
          "fullFile": "C:\\Users\\Acer\\Desktop\\Automation first steps\\test\\Login page tests\\test9 - password field is case sensitive.js",
          "file": "\\test\\Login page tests\\test9 - password field is case sensitive.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "username is case sensitive",
              "fullTitle": "Login page tests username is case sensitive",
              "timedOut": null,
              "duration": 4178,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// ----Execution Steps----\n// launch browser\nlet driver = await new Builder().forBrowser(\"chrome\").build();\n//navigate to app\nawait driver.get(\"https://www.saucedemo.com/\");\n// input Username and Password\nawait driver.findElement(By.id(\"user-name\")).sendKeys(\"standard_user\");\nawait driver.findElement(By.id(\"password\")).sendKeys(\"secret_saucE\");\n//click Login button\nawait driver.findElement(By.id(\"login-button\")).click();\n//----Assertions----\n//--Assert1: URL is not changed\nconst EXPECTED_URL = \"https://www.saucedemo.com/\";\nconst ACTUAL_URL = await driver.getCurrentUrl();\nassert.strictEqual(ACTUAL_URL, EXPECTED_URL);\n//close browser\nawait driver.quit();",
              "err": {},
              "uuid": "6e482d0a-e425-45ba-8edc-1f3354a9b855",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6e482d0a-e425-45ba-8edc-1f3354a9b855"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4178,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "06bdf348-3e92-41d7-a5a1-5f80d442df22",
          "title": "Login page tests",
          "fullFile": "C:\\Users\\Acer\\Desktop\\Automation first steps\\test\\Login page tests\\test7 - login after 3 failed attempts.js",
          "file": "\\test\\Login page tests\\test7 - login after 3 failed attempts.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "login after 3 failed login attempts",
              "fullTitle": "Login page tests login after 3 failed login attempts",
              "timedOut": null,
              "duration": 4592,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// ----Execution Steps----\n// launch browser\nlet driver = await new Builder().forBrowser(\"chrome\").build();\n//navigate to app\nawait driver.get(\"https://www.saucedemo.com/\");\n// input non-existent Username and existing Password 1st time\nlet usernameField = driver.findElement(By.id(\"user-name\"));\nlet passwordField = driver.findElement(By.id(\"password\"));\nawait usernameField.sendKeys(\"standard_user1\");\nawait passwordField.sendKeys(\"secret_sauce\");\n//click Login button\nlet loginButton = driver.findElement(By.id(\"login-button\"));\nawait loginButton.click();\n//--Assert1: URL is not changed\nconst EXPECTED_URL = \"https://www.saucedemo.com/inventory.html\";\nlet actualUrl = await driver.getCurrentUrl();\nassert.notEqual(actualUrl, EXPECTED_URL);\n//clear username\nawait usernameField.clear();\n  \n// input non-existent Username 2d time\nawait usernameField.sendKeys(\"standard_user2\");\n  \n//--Assert2: URL is not changed\nactualUrl = await driver.getCurrentUrl();\nassert.notEqual(actualUrl, EXPECTED_URL);\n//clear username\nawait usernameField.clear();\n// input non-existent Username 3d time\nawait usernameField.sendKeys(\"standard_user3\");\n//--Assert3: URL is not changed\nactualUrl = await driver.getCurrentUrl();\nassert.notEqual(actualUrl, EXPECTED_URL);\n//clear username\nawait usernameField.clear();\n// input existing Username \nawait usernameField.sendKeys(\"standard_user\");\n//click Login button\nawait loginButton.click();\n\n//--Assert3: URL is changed to https://www.saucedemo.com/inventory.html\nactualUrl = await driver.getCurrentUrl();\nassert.strictEqual(actualUrl, EXPECTED_URL);\n//close browser\nawait driver.quit();",
              "err": {},
              "uuid": "fd0e3be4-524a-4ea1-b7ac-ac2a6d577050",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fd0e3be4-524a-4ea1-b7ac-ac2a6d577050"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4592,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "9e30c307-d6fe-4d4d-b106-672980be8400",
          "title": "Login page tests",
          "fullFile": "C:\\Users\\Acer\\Desktop\\Automation first steps\\test\\Login page tests\\test0 - playing around with function nad parametrization.js",
          "file": "\\test\\Login page tests\\test0 - playing around with function nad parametrization.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Succsess parametrized login with standard_user login",
              "fullTitle": "Login page tests Succsess parametrized login with standard_user login",
              "timedOut": null,
              "duration": 4276,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let driver = await new Builder().forBrowser(\"chrome\").build();\nawait driver.get(\"https://www.saucedemo.com/\");\nawait driver.findElement(By.id(\"user-name\")).sendKeys(userName);\nawait driver.findElement(By.id(\"password\")).sendKeys(\"secret_sauce\");\nawait driver.findElement(By.id(\"login-button\")).click();\nconst EXPECTED_URL = \"https://www.saucedemo.com/inventory.html\";\nconst ACTUAL_URL = await driver.getCurrentUrl();\nassert.strictEqual(ACTUAL_URL, EXPECTED_URL);\nawait driver.quit();",
              "err": {},
              "uuid": "1fac51e9-e1f2-4190-ba3e-5037c0c60be2",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Succsess parametrized login with locked_out_user login",
              "fullTitle": "Login page tests Succsess parametrized login with locked_out_user login",
              "timedOut": null,
              "duration": 1480,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let driver = await new Builder().forBrowser(\"chrome\").build();\nawait driver.get(\"https://www.saucedemo.com/\");\nawait driver.findElement(By.id(\"user-name\")).sendKeys(userName);\nawait driver.findElement(By.id(\"password\")).sendKeys(\"secret_sauce\");\nawait driver.findElement(By.id(\"login-button\")).click();\nconst EXPECTED_URL = \"https://www.saucedemo.com/inventory.html\";\nconst ACTUAL_URL = await driver.getCurrentUrl();\nassert.strictEqual(ACTUAL_URL, EXPECTED_URL);\nawait driver.quit();",
              "err": {
                "message": "AssertionError: Expected values to be strictly equal:\n+ actual - expected\n\n+ 'https://www.saucedemo.com/'\n- 'https://www.saucedemo.com/inventory.html'\n                             ^",
                "estack": "AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n+ actual - expected\n\n+ 'https://www.saucedemo.com/'\n- 'https://www.saucedemo.com/inventory.html'\n                             ^\n    at Context.<anonymous> (test\\Login page tests\\test0 - playing around with function nad parametrization.js:76:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- https://www.saucedemo.com/\n+ https://www.saucedemo.com/inventory.html\n"
              },
              "uuid": "3ce73946-cfdc-411e-b4b0-b370e150bc78",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Succsess parametrized login with problem_user login",
              "fullTitle": "Login page tests Succsess parametrized login with problem_user login",
              "timedOut": null,
              "duration": 1713,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let driver = await new Builder().forBrowser(\"chrome\").build();\nawait driver.get(\"https://www.saucedemo.com/\");\nawait driver.findElement(By.id(\"user-name\")).sendKeys(userName);\nawait driver.findElement(By.id(\"password\")).sendKeys(\"secret_sauce\");\nawait driver.findElement(By.id(\"login-button\")).click();\nconst EXPECTED_URL = \"https://www.saucedemo.com/inventory.html\";\nconst ACTUAL_URL = await driver.getCurrentUrl();\nassert.strictEqual(ACTUAL_URL, EXPECTED_URL);\nawait driver.quit();",
              "err": {},
              "uuid": "630e53f0-9d75-400d-a299-563848617529",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Succsess parametrized login with performance_glitch_user login",
              "fullTitle": "Login page tests Succsess parametrized login with performance_glitch_user login",
              "timedOut": null,
              "duration": 6436,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let driver = await new Builder().forBrowser(\"chrome\").build();\nawait driver.get(\"https://www.saucedemo.com/\");\nawait driver.findElement(By.id(\"user-name\")).sendKeys(userName);\nawait driver.findElement(By.id(\"password\")).sendKeys(\"secret_sauce\");\nawait driver.findElement(By.id(\"login-button\")).click();\nconst EXPECTED_URL = \"https://www.saucedemo.com/inventory.html\";\nconst ACTUAL_URL = await driver.getCurrentUrl();\nassert.strictEqual(ACTUAL_URL, EXPECTED_URL);\nawait driver.quit();",
              "err": {},
              "uuid": "20e27216-947c-41c6-9f02-fa30781571d3",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Succsess parametrized login with error_user login",
              "fullTitle": "Login page tests Succsess parametrized login with error_user login",
              "timedOut": null,
              "duration": 1387,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let driver = await new Builder().forBrowser(\"chrome\").build();\nawait driver.get(\"https://www.saucedemo.com/\");\nawait driver.findElement(By.id(\"user-name\")).sendKeys(userName);\nawait driver.findElement(By.id(\"password\")).sendKeys(\"secret_sauce\");\nawait driver.findElement(By.id(\"login-button\")).click();\nconst EXPECTED_URL = \"https://www.saucedemo.com/inventory.html\";\nconst ACTUAL_URL = await driver.getCurrentUrl();\nassert.strictEqual(ACTUAL_URL, EXPECTED_URL);\nawait driver.quit();",
              "err": {},
              "uuid": "e88a39b2-3399-40d6-a60e-5b6fd3bc6f5a",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Succsess parametrized login with visual_user login",
              "fullTitle": "Login page tests Succsess parametrized login with visual_user login",
              "timedOut": null,
              "duration": 1430,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let driver = await new Builder().forBrowser(\"chrome\").build();\nawait driver.get(\"https://www.saucedemo.com/\");\nawait driver.findElement(By.id(\"user-name\")).sendKeys(userName);\nawait driver.findElement(By.id(\"password\")).sendKeys(\"secret_sauce\");\nawait driver.findElement(By.id(\"login-button\")).click();\nconst EXPECTED_URL = \"https://www.saucedemo.com/inventory.html\";\nconst ACTUAL_URL = await driver.getCurrentUrl();\nassert.strictEqual(ACTUAL_URL, EXPECTED_URL);\nawait driver.quit();",
              "err": {},
              "uuid": "83786312-fffc-4577-9674-877e24d8c9fe",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1fac51e9-e1f2-4190-ba3e-5037c0c60be2",
            "630e53f0-9d75-400d-a299-563848617529",
            "20e27216-947c-41c6-9f02-fa30781571d3",
            "e88a39b2-3399-40d6-a60e-5b6fd3bc6f5a",
            "83786312-fffc-4577-9674-877e24d8c9fe"
          ],
          "failures": [
            "3ce73946-cfdc-411e-b4b0-b370e150bc78"
          ],
          "pending": [],
          "skipped": [],
          "duration": 16722,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.3.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "testResults",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportFilename": "testResults"
      },
      "version": "6.2.0"
    }
  }
}